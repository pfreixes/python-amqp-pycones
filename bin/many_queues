#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Many queues entry point. Use as a main script to run the tests or for just
get info about each implementation.

:moduleauthor: Pau Freixes, pfreixes@gmail.com
"""

import sys
import click
import logging

from optparse import OptionParser

from python_amqp.consume_many_queues import (
    list as list_tests,
    run,
    info,
    MESSAGES,
    QUEUES)

USAGE = """
many_queues 0.1 pfreixes

usage: many_queues [global options] <comand> [command options] arg1 arg2
    options:
       -v Run in verbose mode, debug level mode.
       -q Run quiet.

    commands:
       list  Get a list of names and short descriptions of implemented tests
       info  <test name> Get a deatail info of a implemlented test
       run   Wihout arguments runs all tests, but use them to run only those ones
             given as arguments. This command also suports the following options
             --messages <num messagess used> --queues <num queues used>
"""

@click.group()
@click.option('-v', is_flag=True, help='Run in verbose mode')
@click.option('-q', is_flag=True, help='Run silenced, just print the results')
def many_queues(v, q):
    # just leave ready the logger settings considering
    # it has to be configured to run in verbose mode, or
    # to run just in quite mode.

    root = logging.getLogger()
    if q:
        root.addHandler(logging.NullHandler())
    else:
        root.setLevel(logging.DEBUG if v else logging.INFO)
        logging.basicConfig(format='%(message)s')

        # Set the logging level of requests and pika package
        # in ERROR level.
        logging.getLogger('requests').setLevel(logging.ERROR)
        logging.getLogger('pika').setLevel(logging.ERROR)

@many_queues.command('list',
                   help='Get a list of the implemented tests with the key name plus the short description')
def cmd_list():
    print '\n'.join(list_tests())


@many_queues.command('info', help='Get a detail info of an implemented test')
@click.argument('test_name')
def cmd_info(test_name):
    print info(test_name)
    

@many_queues.command('run',
                   help='Runs all tests. Filter by name passing them as arguments')
@click.option('--queues', default=QUEUES,
              type=int,
              help='Run the tests using this amount of queues. Default {}'.format(QUEUES))
@click.option('--messages', default=MESSAGES,
              type=int,
              help='Publish this amount of messsages to each queue. Default {}'.format(MESSAGES))
@click.argument('test_name', nargs=-1)
def cmd_run(queues, messages, test_name):
    # test_name is a tuple containing a names of tests, or when there is no 
    # arguments it is a empty tuple.
    results = run(tests=test_name, queues=queues, messages=messages)

    # reorder the tests giving the most faster at the top of the list,
    # each result is composed by the attr name, real, user, sys, msg/sec
    # we use the last one to order.
    results.sort(key=lambda result: result[-1])

    print "+-------------------+-------------------------+---------+---------+---------+-------+"
    print "|Name               |Parameters               |     Real|     User|      Sys|  Msg/s|"
    print "+-------------------+-------------------------+---------+---------+---------+-------+"
    for result in results:
        name, parameters, real, user, sys_, msgs_second = result
        print "|%s|%s|% 9.2f|% 9.2f|% 9.2f|% 7d|" % (name.ljust(19), str(parameters).ljust(25), real, user, sys_, msgs_second)
    print "+------------------+-------------------------+---------+---------+---------+--------+"


if __name__ == "__main__":
    many_queues()
